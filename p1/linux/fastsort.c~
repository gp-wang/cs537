#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <assert.h>
#include <ctype.h>
#include <string.h>
#include "sort.h"
#include <sys/types.h>
#include <sys/stat.h>
#include <string.h>

//comp func for qsort
static int comprec_t(const void *p1, const void *p2)
{
  int aa,bb;
  aa=(*(rec_t *)p1).key;
  bb=(*(rec_t *)p2).key;
  return aa-bb;
}

void
usage(char *prog) 
{
  //fprintf(stderr, "usage: %s <-i file>\n", prog);
  fprintf(stderr, "Usage: fastsort -i inputfile -o outputfile\n");
  exit(1);
}

int
main(int argc, char *argv[])
{
  // arguments
  char *inFile = "/no/such/file";
  char *outFile = "/no/such/file";
  struct stat sb;//GW: per the stat eg.


  // input params
  int c;
  opterr = 0;//??? => resolved by reading man opterr
  c = getopt(argc, argv, "i:o:") ;
  if(c==-1)
    usage(argv[0]);
  //    printf("c=%d",c);
  while (c != -1) {//This works
    switch (c) {
    case 'i':
      inFile = strdup(optarg);
      break;
    case 'o'://This works
      outFile = strdup(optarg);
      break;
    default:
      usage(argv[0]);
    }
    c = getopt(argc, argv, "i:o:") ;
  }
  //    printf("optstring=%s");

  // open and create input file
  int fd = open(inFile, O_RDONLY);
  if (fd < 0) {

    fprintf(stderr,"Error: Cannot open file %s\n",inFile);
    exit(1);
  }

  //Read the lines into an array or rec_t:r[];
  int lc=0; //line counter
  fstat(fd,&sb);//get the total line number in file
  int numline;
  numline=sb.st_size/sizeof(rec_t); // total line number in file
  rec_t r[numline];
  int rc;
  while (1) {
    rc = read(fd,&(r[lc]), sizeof(rec_t));//it seems when I use pointer arithmetic (&r+lc) wont work here
    if (rc == 0) // 0 indicates EOF
      break;
    if (rc < 0) {
      perror("read");
      exit(1);
    }

    ++lc; //increase line counter
  }

  (void) close(fd);

  //sort the array r[]
  qsort(r, numline, sizeof(rec_t), comprec_t);

  //write the sorted array r[] into output file
  // creat o/p file if non-exist; if exist, clear exiting content
  fd = open(outFile, O_WRONLY|O_CREAT|O_TRUNC, S_IRWXU);//int open(const char *pathname, int flags, mode_t mode);
  if (fd < 0) {
    fprintf(stderr,"Error: Cannot open file %s\n",outFile);
    exit(1);
  }

  rc=write(fd,&(r),sizeof(r));
  (void) close(fd);
  return 0;
}


